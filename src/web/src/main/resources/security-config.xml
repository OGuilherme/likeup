<?xml version="1.0" encoding="UTF-8"?>

<beans:beans
	xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
						http://www.springframework.org/schema/security
						http://www.springframework.org/schema/security/spring-security-4.2.xsd"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/security">

	<http auto-config="true">
		<intercept-url access="permitAll" pattern="/favicon.ico" />
		<intercept-url access="permitAll" pattern="/css/**" />
		<intercept-url access="permitAll" pattern="/fonts/**" />
		<intercept-url access="permitAll" pattern="/img/**" />
		<intercept-url access="permitAll" pattern="/js/**" />
		<intercept-url access="permitAll" pattern="/premium/**" />
		<intercept-url access="permitAll" pattern="/plugins/**" />
		<intercept-url access="permitAll" pattern="/login" />
		<intercept-url access="permitAll" pattern="/register" />
		<intercept-url access="isAuthenticated()" pattern="/**" requires-channel="any"/>
		<!--Login customizado -->
		<!-- <form-login login-page="/login" password-parameter="password" username-parameter="user"/> -->
		<!--Acesso não permitido page -->
		<!-- <access-denied-handler error-page="/Access_Denied" /> -->
		<csrf />
	</http>
	
	<!--@PreAuthorize é adequado para verificar a autorização antes de entrar no método.
		@PostAuthorize , muitas vezes usado, verifica a autorização após o método ter sido executado, 
			por isso é adequado para verificar a autorização nos valores retornados. -->
	<global-method-security pre-post-annotations="enabled"/>
</beans:beans>